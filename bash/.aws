#!/bin/bash


buildlogs() {  # latest build logs in CLI; required arg is AWS stage
    [ $# -eq 0 ] && dev_stage=$DEV_STAGE && echo "Using default stage $DEV_STAGE; pass an arg to override"
    [ $# -eq 1 ] && dev_stage=$1
    aws-azure-login -f --profile $AWS_PROFILE --mode=debug
    aws s3 cp "s3://$BUILD_ARTIFACTS_BUCKET/$dev_stage-back-end-build-logs/$(aws s3 ls "s3://$BUILD_ARTIFACTS_BUCKET/$dev_stage-back-end-build-logs/" | sort -n | tail -1 | awk '{ print $4 }' )" - | zcat -
}

cwlogs() {  # latest cloudwatch logs; arg1 (optional): Lambda name; arg2 (optional): stage name
    if [ $# -eq 0 ]; then
        lambda_folder=$(find "${LAMBDA_PATHS[@]}" \
                        -mindepth 1 -maxdepth 1 \
                        -type d \
                        -not -path '*/node_modules*' | fzf)
        [ -z "$lambda_folder" ] && echo "Error: No Lambda folder selected" && return
        lambda_name=$(basename "$lambda_folder")
    elif [ $# -eq 1 ]; then
        lambda_name=$1
    elif [ $# -eq 2 ]; then
        lambda_name=$1
        stage=$DEV_STAGE && echo "Using default stage $DEV_STAGE; pass an arg to override"
    else
        lambda_name=$1
        stage=$2
    fi

    lambda_name=${lambda_name/demo/$stage}
    stage_title_case=$(echo "$stage" | awk '{print toupper(substr($0, 1, 1)) tolower(substr($0, 2))}')
    lambda_name=${lambda_name/Demo/$stage_title_case}

    echo $lambda_name

    log_stream_name=$(aws logs describe-log-streams \
                        --log-group-name "/aws/lambda/${lambda_name}" \
                        --order-by LastEventTime \
                        --descending true \
                        --limit 1 \
                        --query 'logStreams[0].logStreamName' \
                        --output text)

    if [ -z "$log_stream_name" ]; then
        echo "Error: Failed to retrieve log stream name"
        return 1
    fi

    aws logs get-log-events --log-group-name "/wcp-$stage/${lambda_name}" \
                            --log-stream-name "$(aws logs describe-log-streams \
                            --log-group-name "/aws/lambda/${lambda_name}" \
                            --order-by LastEventTime \
                            --descending true \
                            --limit 1 \
                            --query 'logStreams[0].logStreamName' \
                            --output text)" \
                            --limit 10
}

lopen() {  # pop open browser to particular Lambda; arg1 (opt) Lambda name; arg2 (optional) stage; arg3 (optional) AWS region
    if [ $# -eq 0 ]; then
        # If no arguments are passed, use fzf to select a Lambda folder
        # LAMBDA_PATHS = an array of dirs
        lambda_folder=$(find "${LAMBDA_PATHS[@]}" \
                        -mindepth 1 -maxdepth 1 \
                        -type d \
                        -not -path '*/node_modules*' | fzf)
        [ -z "$lambda_folder" ] && echo "Error: No Lambda folder selected" && return
        lambda_name=$(basename "$lambda_folder")
        stage=$DEV_STAGE && echo "Using default stage $DEV_STAGE; pass an arg to override"
        aws_region="us-east-1"
    elif [ $# -eq 1 ]; then
        lambda_name=$1
        stage=$DEV_STAGE && echo "Using default stage $DEV_STAGE; pass an arg to override"
        aws_region="us-east-1"
    elif [ $# -eq 2 ]; then
        lambda_name=$1
        stage=$2
        aws_region="us-east-1"
    elif [ $# -eq 3 ]; then
        lambda_name=$1
        stage=$2
        aws_region=$3
    else
        echo "Error: Invalid number of arguments"
        return
    fi

    stage_title_case=$(echo "$stage" | awk '{print toupper(substr($0, 1, 1)) tolower(substr($0, 2))}')

    if [[ ! "$my_string" == *"Demo"* && ! "$my_string" == *"demo" ]]; then
        lambda_name="$lambda_name$stage_title_case"
    fi

    lambda_name=${lambda_name/demo/$stage}
    lambda_name=${lambda_name/Demo/$stage_title_case}

    url="https://$aws_region.console.aws.amazon.com/lambda/home?region=$aws_region#/functions/$lambda_name?tab=monitoring"


    cmd.exe /c start "$url" 2>/dev/null
}
